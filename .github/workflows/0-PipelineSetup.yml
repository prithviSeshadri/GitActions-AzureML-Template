name: Step 0 - Sample Pipeline using GitHub Actions and AzureML

# on:
#   push:
#     branches:
#       - main
#       - Alternate Branch Name

# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'DevInfraTest, DEV, Test, Prod'
#         required: true
#       start_date:
#         description: "Start date - mm/dd/yyyy: 2024-04-01"
#         required: true
#       end_date:
#         description: "End date - mm/dd/yyyy: 2024-04-02"
#         required: true
#       frequency:
#         description: "Frequency - 1s,10s,1min,10min,1h"
#         required: true

on:
  schedule:
    - cron: "0 21 * * *"

jobs:
  sample_pipeline:
    runs-on: ubuntu-latest
    environment: ${{github.event.inputs.environment}}
    env:
      ENVN: 'DEV' ## Fill in environment details, values can be DEV, TST, PRD
      TASK: 'data' ## Fill in task details, values can be training or batchinference
      COMPUTE_NAME: '' ## Fill in compute cluster name that will be used for your task
      PIPELINE_NAME: '' ## Fill in pipeline name that you will use to reference the pipeline
      EXPERIMENT_NAME: '' ## Fill in experiment name that will help you track the pipeline runs
      WORKSPACE: '' ## Fill in workspace name that will be used for your task
      RESOURCE_GROUP: '' ## Fill in resource group name that will be used for your task
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azureml-sdk

      - name: Add AzureML config file
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE_NAME }}
        run: |
          echo "Creating AzureML config.json file..."
          cat <<EOF > config.json
          {
            "subscription_id": "${AZURE_SUBSCRIPTION_ID}",
            "resource_group": "${AZURE_RESOURCE_GROUP}",
            "workspace_name": "${AZURE_WORKSPACE_NAME}"
          }
          EOF
          echo "AzureML config.json file created."

      - name: Login to Azure
        run: |
            az login --service-principal --username ${{secrets.CLIENT_ID}} --tenant ${{secrets.TENANT_ID}} --password ${{secrets.CLIENT_SECRET}}
            az account set --subscription=${{secrets.SUBSCRIPTION_ID}}

      - name: Setup compute
        run: |
        
            az config set extension.dynamic_install_allow_preview=true
            az extension add -n ml
            workspace_params="--workspace-name ${{env.WORKSPACE}} --resource-group ${{env.RESOURCE_GROUP}}"
            path="mlops-pipelines/configuration/compute/${{env.ENVN}}-training-compute.yml"
            subnet_id=$"/subscriptions/${{secrets.subscription_id}}/resourceGroups/${{env.RESOURCE_GROUP}}/providers/Microsoft.Network/virtualNetworks/AMLVNET/subnets/COMPUTE-SUBNET"
            # az ml compute create --type computeinstance --name ${{env.COMPUTE_NAME}} --subnet $subnet_id --file "$path" $workspace_params
            # echo $path
            existing_compute=$(az ml compute show -n ${{env.COMPUTE_NAME}} $workspace_params) || create_compute=$(az ml compute create --type computeinstance --name ${{env.COMPUTE_NAME}} --subnet $subnet_id --file "$path" $workspace_params --identity-type SystemAssigned)
            existing_state=$(az ml compute show -n ${{env.COMPUTE_NAME}} $workspace_params --query state) #|| create_compute=$(az ml compute create --type computeinstance --name ${{env.COMPUTE_NAME}} --subnet $subnet_id --file "$path" $workspace_params)
            
            echo "Current state $existing_state"
            if [$existing_compute]; then
                echo "Compute does not exist"
                # az ml compute create --type computeinstance --name ${{env.COMPUTE_NAME}} --subnet $subnet_id --file $path $workspace_params --identity-type SystemAssigned
            else
                echo "Check compute status"
                if [ "$existing_state" == "\"Stopped\"" ]; then
                az ml compute start -n ${{env.COMPUTE_NAME}} $workspace_params
                echo "Compute started"
                fi
                if [ "$existing_state" == "\"Starting\"" ]; then
                az ml compute start -n ${{env.COMPUTE_NAME}} $workspace_params
                echo "Compute started"
                fi
                
            fi
            
            echo "Finished setting up compute"
        shell: bash
      
      - name: Run AzureML Pipeline  
        run: |
          python setup_pipeline.py --compute-instance "${{env.COMPUTE_NAME}}" --start_date_param "${{github.event.inputs.start_date}}" --end_date_param "${{github.event.inputs.end_date}}" --frequency_param "${{github.event.inputs.frequency}}" --client_id "${{secrets.CLIENT_ID}}" --client_secret "${{secrets.CLIENT_SECRET}}" --tenant_id "${{secrets.TENANT_ID}}"


    
    

